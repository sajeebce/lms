// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ============================================
// TENANT & USER MODELS
// ============================================

model Tenant {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  branches            Branch[]
  academicYears       AcademicYear[]
  streams             Stream[]
  classes             Class[]
  cohorts             Cohort[]
  sections            Section[]
  cohortSections      CohortSection[]
  teachers            Teacher[]
  rooms               Room[]
  routines            Routine[]
  users               User[]
  themeSettings       ThemeSettings?
  tenantSettings      TenantSettings?
  students            Student[]
  guardians           Guardian[]
  studentDocuments    StudentDocument[]
  courses             Course[]
  studentEnrollments  StudentEnrollment[]
  courseEnrollments   CourseEnrollment[]

  @@map("tenants")
}

model User {
  id        String   @id @default(cuid())
  tenantId  String
  email     String
  name      String
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant          Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  routinesCreated Routine[]
  student         Student?

  @@unique([tenantId, email])
  @@map("users")
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

// ============================================
// ACADEMIC SETUP MODELS
// ============================================

model Branch {
  id        String       @id @default(cuid())
  tenantId  String
  name      String
  code      String?
  address   String?
  phone     String?
  status    BranchStatus @default(ACTIVE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  tenant      Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  cohorts     Cohort[]
  enrollments StudentEnrollment[]

  @@unique([tenantId, name])
  @@map("branches")
}

enum BranchStatus {
  ACTIVE
  INACTIVE
}

model AcademicYear {
  id        String            @id @default(cuid())
  tenantId  String
  name      String
  code      String
  startDate DateTime
  endDate   DateTime
  state     AcademicYearState @default(PLANNED)
  isCurrent Boolean           @default(false)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  tenant      Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  cohorts     Cohort[]
  enrollments StudentEnrollment[]

  @@unique([tenantId, code])
  @@map("academic_years")
}

enum AcademicYearState {
  PLANNED
  ACTIVE
  COMPLETED
  ARCHIVED
}

model Stream {
  id        String   @id @default(cuid())
  tenantId  String
  name      String
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant  Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  classes Class[]
  cohorts Cohort[]

  @@unique([tenantId, name])
  @@map("streams")
}

model Class {
  id        String   @id @default(cuid())
  tenantId  String
  name      String
  alias     String?
  order     Int
  streamId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant      Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  stream      Stream?             @relation(fields: [streamId], references: [id], onDelete: SetNull)
  cohorts     Cohort[]
  enrollments StudentEnrollment[]

  @@unique([tenantId, name])
  @@unique([tenantId, order])
  @@map("classes")
}

model Cohort {
  id             String       @id @default(cuid())
  tenantId       String
  yearId         String
  classId        String
  streamId       String?
  branchId       String
  name           String
  status         CohortStatus @default(PLANNED)
  enrollmentOpen Boolean      @default(false)
  startDate      DateTime?
  endDate        DateTime?
  archivedAt     DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  tenant Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  year   AcademicYear @relation(fields: [yearId], references: [id], onDelete: Restrict)
  class  Class        @relation(fields: [classId], references: [id], onDelete: Restrict)
  stream Stream?      @relation(fields: [streamId], references: [id], onDelete: SetNull)
  branch Branch       @relation(fields: [branchId], references: [id], onDelete: Restrict)

  // Many-to-many relationship with sections through CohortSection junction table
  cohortSections CohortSection[]
  enrollments    StudentEnrollment[]

  @@unique([tenantId, yearId, classId, streamId, branchId, name])
  @@map("cohorts")
}

enum CohortStatus {
  PLANNED
  ACTIVE
  COMPLETED
  ARCHIVED
}

model Section {
  id        String   @id @default(cuid())
  tenantId  String
  name      String
  capacity  Int      @default(0) // 0 = unlimited
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant      Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  routines    Routine[]
  enrollments StudentEnrollment[]

  // Many-to-many relationship with cohorts through CohortSection junction table
  cohortSections CohortSection[]

  // Section name must be unique per tenant (sections are now independent resources)
  @@unique([tenantId, name])
  @@map("sections")
}

// Junction table for many-to-many relationship between Cohorts and Sections
model CohortSection {
  id        String   @id @default(cuid())
  tenantId  String
  cohortId  String
  sectionId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant  Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  cohort  Cohort  @relation(fields: [cohortId], references: [id], onDelete: Cascade)
  section Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  // A section can only be linked to a cohort once
  @@unique([tenantId, cohortId, sectionId])
  @@map("cohort_sections")
}

model Teacher {
  id               String   @id @default(cuid())
  tenantId         String
  name             String
  email            String
  phone            String?
  availabilityJson String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  routines Routine[]

  @@unique([tenantId, email])
  @@map("teachers")
}

model Room {
  id        String     @id @default(cuid())
  tenantId  String
  name      String
  capacity  Int?
  status    RoomStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  routines Routine[]

  @@unique([tenantId, name])
  @@map("rooms")
}

enum RoomStatus {
  ACTIVE
  INACTIVE
}

model Routine {
  id              String   @id @default(cuid())
  tenantId        String
  sectionId       String
  teacherId       String
  roomId          String
  courseId        String?
  dayOfWeek       Int // 0 = Sunday, 1 = Monday, ..., 6 = Saturday
  startTime       String // Format: "HH:MM"
  endTime         String // Format: "HH:MM"
  createdByUserId String
  createdAt       DateTime @default(now())

  tenant    Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Restrict)
  room      Room    @relation(fields: [roomId], references: [id], onDelete: Restrict)
  createdBy User    @relation(fields: [createdByUserId], references: [id], onDelete: Restrict)

  @@map("routines")
}

// ============================================
// THEME SETTINGS MODEL
// ============================================

model ThemeSettings {
  id          String   @id @default(cuid())
  tenantId    String   @unique

  // Theme mode (light/dark/auto)
  mode        String   @default("light") // "light" | "dark" | "auto"

  // Predefined theme or custom
  themeName   String   @default("pink-orange") // "pink-orange", "blue-ocean", "green-forest", "purple-dream", "custom"
  isCustom    Boolean  @default(false)

  // Active state colors
  activeFrom  String   @default("#ec4899") // pink-500
  activeTo    String   @default("#f97316") // orange-500

  // Hover state colors
  hoverFrom   String   @default("#fdf2f8") // pink-50
  hoverTo     String   @default("#fff7ed") // orange-50

  // Border color
  borderColor String   @default("#fbcfe8") // pink-300

  // Button colors
  buttonFrom  String   @default("#ec4899") // pink-500
  buttonTo    String   @default("#f97316") // orange-500

  // Text color override (optional, for custom themes or dark mode)
  hoverTextColor String? // Optional: override hover text color

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("theme_settings")
}

// ============================================
// TENANT SETTINGS MODEL
// ============================================

model TenantSettings {
  id              String   @id @default(cuid())
  tenantId        String   @unique
  enableCohorts   Boolean  @default(true)  // Enable/disable cohort-based enrollment
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("tenant_settings")
}

// ============================================
// STUDENT MODEL
// ============================================

model Student {
  id              String   @id @default(cuid())
  tenantId        String
  userId          String   @unique

  // Auto-generated student ID (e.g., STU-2025-001)
  studentId       String?

  // Personal Information
  name            String
  email           String?
  phone           String?
  dateOfBirth     DateTime?
  gender          Gender?
  bloodGroup      String?
  photoUrl        String?

  // Address
  presentAddress  String?
  permanentAddress String?

  // Academic Information
  rollNumber      String?
  admissionDate   DateTime @default(now())

  // Previous School (Optional)
  previousSchoolName    String?
  previousSchoolAddress String?
  previousClass         String?
  previousBoard         String?
  tcNumber              String?

  // Status
  status          StudentStatus @default(ACTIVE)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  guardians       Guardian[]
  enrollments     StudentEnrollment[]
  courseEnrollments CourseEnrollment[]
  documents       StudentDocument[]

  @@unique([tenantId, studentId])
  @@unique([tenantId, email])
  @@map("students")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  GRADUATED
  TRANSFERRED
  DROPPED
}

// Guardian Model
model Guardian {
  id              String   @id @default(cuid())
  tenantId        String
  studentId       String

  name            String
  relationship    String
  phone           String
  email           String?
  occupation      String?
  address         String?
  isPrimary       Boolean  @default(false)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  student         Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("guardians")
}

// Student Documents
model StudentDocument {
  id              String   @id @default(cuid())
  tenantId        String
  studentId       String

  documentType    String
  fileName        String
  fileUrl         String
  fileSize        Int

  uploadedAt      DateTime @default(now())

  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  student         Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("student_documents")
}

// ============================================
// COURSE MODEL
// ============================================

model Course {
  id              String   @id @default(cuid())
  tenantId        String
  name            String
  code            String
  description     String?
  credits         Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  enrollments     CourseEnrollment[]

  @@unique([tenantId, code])
  @@map("courses")
}

// ============================================
// ENROLLMENT MODELS
// ============================================

model StudentEnrollment {
  id              String   @id @default(cuid())
  tenantId        String
  studentId       String
  sectionId       String

  // Enrollment Type (based on cohort setting)
  enrollmentType  EnrollmentType @default(DIRECT)
  cohortId        String?  // Only if enrollmentType = COHORT_BASED

  // Academic Info
  academicYearId  String
  classId         String
  branchId        String

  enrollmentDate  DateTime @default(now())
  status          EnrollmentStatus @default(ACTIVE)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tenant          Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  student         Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  section         Section       @relation(fields: [sectionId], references: [id], onDelete: Restrict)
  cohort          Cohort?       @relation(fields: [cohortId], references: [id], onDelete: Restrict)
  academicYear    AcademicYear  @relation(fields: [academicYearId], references: [id], onDelete: Restrict)
  class           Class         @relation(fields: [classId], references: [id], onDelete: Restrict)
  branch          Branch        @relation(fields: [branchId], references: [id], onDelete: Restrict)

  @@unique([tenantId, studentId, academicYearId])
  @@map("student_enrollments")
}

enum EnrollmentType {
  COHORT_BASED
  DIRECT
}

model CourseEnrollment {
  id              String   @id @default(cuid())
  tenantId        String
  studentId       String
  courseId        String
  enrollmentDate  DateTime @default(now())
  status          EnrollmentStatus @default(ACTIVE)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  student         Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course          Course   @relation(fields: [courseId], references: [id], onDelete: Restrict)

  @@unique([tenantId, studentId, courseId])
  @@map("course_enrollments")
}

enum EnrollmentStatus {
  ACTIVE
  DROPPED
  COMPLETED
}
